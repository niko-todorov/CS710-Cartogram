ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_d()
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar() +
scale_fill_viridis_c()
ggplot(lat_group,aes(x=lat_cat,y=score,color=score)) +
geom_point() +
scale_fill_viridis_c()
ggplot(lat_group,aes(x=lat_cat,y=score,color=score)) +
geom_point() +
scale_fill_viridis_c()
ggplot(lat_group,aes(x=lat_cat,y=score,color=score)) +
geom_point() +
scale_color_viridis_c()
#MAP
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon() +
scale_fill_viridis_c()
=======
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
world_happiness <- read.csv(file = 'archive/2019.csv')
install.packages("dplyr")
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
install.packages("dplyr")
>>>>>>> Stashed changes
packages<-c("ggplot2","tibble","dplyr","tidyr","viridis","mapproj","purrr")
install.packages(setdiff(packages, rownames(installed.packages())))
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(maps)
library(mapproj)
library(tibble)
library(purrr)
library(readr)
happiness <- tibble(read_csv("data/happinessdata.csv"))
View(happiness)
View(happiness)
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
world_happiness <- read.csv(file = 'archive/2019.csv')
temp<-read.csv(file='Temperature.csv',strip.white = TRUE)
library(ggplot2)
library(maps)
library(mapproj)
library(readr)
Temperature <- read_csv("data/Temperature.csv")
View(Temperature)
library(readr)
happinessdata <- read_csv("data/happinessdata.csv")
View(happinessdata)
world_happiness <- read.csv(file = '../data/2019.csv')
world_happiness <- read.csv(file = 'data/2019.csv')
world_happiness$Country.or.region[world_happiness$Country.or.region=="United States"] <- "USA"
world_happiness$Country.or.region[world_happiness$Country.or.region=="United Kingdom"] <- "UK"
countries<-map_data("world")
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#MAP
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon() +
scale_fill_viridis_c()
#POINT
latitude<-happiness_map %>% group_by(region) %>% summarise(score=mean(Score),lat=mean(abs(lat))) %>% drop_na()
ggplot(latitude,aes(x=lat,y=score,color=score)) +
geom_point() +
scale_color_viridis_c()
#BAR
latitude$lat_cat<-factor(cut(latitude$lat,seq(0,70,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(score),count=n())
#Score versus distance from equator versus
ggplot(lat_group,aes(x=lat_cat,y=score,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
#Count versus distance from equator colored by score
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
# Score vs GDP
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score)) + geom_point()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.5))
ggplot(world_happiness,aes(x=gdp,y=Score,fill=gdp)) +
geom_boxplot() +
scale_fill_viridis_d()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.25))
gdp_group <- world_happiness %>% group_by(gdp) %>% summarise(score=mean(Score))
ggplot(gdp_group,aes(x=gdp,y=score,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
temp<-read.csv(file='Temperature.csv',strip.white = TRUE)
temp<-read.csv(file='data/Temperature.csv',strip.white = TRUE)
trim.leading <- function (x)  sub("^\\s+", "", x)
temp$Country <- trim.leading(temp$Country)
happiness_temp<-merge(temp,world_happiness,by.x="Country",by.y="Country.or.region")
#BOXPLOT
happiness_temp$temp_cat <- factor(cut(happiness_temp$Temperature,breaks=seq(-10,30,5)))
happiness_temp<-merge(temp,world_happiness,by.x="Country",by.y="Country.or.region")
world_happiness <- read.csv(file = 'data/2019.csv')
temp<-read.csv(file='data/Temperature.csv',strip.white = TRUE)
trim.leading <- function (x)  sub("^\\s+", "", x)
temp$Country <- trim.leading(temp$Country)
happiness_temp<-merge(temp,world_happiness,by.x="Country",by.y="Country.or.region")
#BOXPLOT
happiness_temp$temp_cat <- factor(cut(happiness_temp$Temperature,breaks=seq(-10,30,5)))
ggplot(happiness_temp,aes(x=temp_cat,y=Score,fill=temp_cat)) +
geom_boxplot() +
scale_fill_viridis_d()
#BAR
temp_group <- happiness_temp %>% group_by(temp_cat) %>% summarise(score=mean(Score),count=n())
ggplot(temp_group,aes(x=temp_cat,fill=score)) +
geom_bar()
ggplot(temp_group,aes(x=temp_cat,y=count,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
happiness <- read_csv("data/happinessdata.csv")
mid <- mean(happiness$Year)
packages<-c("ggplot2","tibble","dplyr","tidyr","viridis","mapproj","purrr")
install.packages(setdiff(packages, rownames(installed.packages())))
packages<-c("ggplot2","tibble","dplyr","tidyr","viridis","mapproj","purrr")
install.packages(setdiff(packages, rownames(installed.packages())))
packages<-c("ggplot2","tibble","dplyr","tidyr","viridis","mapproj","purrr")
install.packages(setdiff(packages, rownames(installed.packages())))
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(maps)
library(mapproj)
library(tibble)
library(purrr)
library(readr)
library(ggalt)
happiness <- read_csv("data/happinessdata.csv")
mid <- mean(happiness$Year)
ggplot(happiness,aes(x=Economy,y=HappinessScore,color=Year))+
geom_point() +
scale_color_gradient2(midpoint=mid,low="blue",mid="white",
high="red",space="Lab")
ggplot(happiness,aes(x=Economy,y=HappinessScore,color=Region))+
geom_point() +
geom_encircle()
ggplot(data <- happiness, mapping <- aes(x<-Economy, y<-HappinessScore, color<-Region, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy, y<-HappinessScore, color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy, y<-HappinessScore, color<-HappinessRank, fill<-Economy)) + geom_violin() + geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy, y<-as.factor(Region), color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappinessScore, y<-as.factor(Region), color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappinessScore**2, y<-as.factor(Region), color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-100*
HappinessScore**2, y<-as.factor(Region), color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-100*HappinessScore**2, y<-as.factor(Region), color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy**2, y<-as.factor(Region), color<-HappinessRank, fill<-Economy)) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy**2, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessScore))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy**2, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappynessRank, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappynessScore, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy+HappinessScore, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappinessScore, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy+Family, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy+Family+Health, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Economy+Health, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-as.factor(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-as.integer(Region), fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-HappinessRank, fill<-as.factor(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-HappinessRank, fill<-as.integer(HappynessRank))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-HappinessRank, fill<-as.integer(HappynessRank))) + geom_violin(show.legend = TRUE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(HappynessRank), fill<-mean(HappynessRank))) + geom_violin(show.legend = TRUE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(HappynessRank))) + geom_violin(show.legend = TRUE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(show.legend = TRUE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin() # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin() + geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-as.factor(Region), y<-Health, color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_point() # geom_contour
Health
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=FALSE) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=FALSE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappinessScore, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappinessScore*1000, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-HappinessScore+Health, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health+Family, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Family, y<-as.factor(Region), color<-mean(Region), fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Family, y<-as.factor(Region), color<-Country, fill<-mean(Region))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Family, y<-as.factor(Region), color<-Country, fill<-Country)) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Family, y<-as.factor(Region), color<-Country, fill<-as.factor(Country))) + geom_violin(trim=TRUE) # geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <-
aes(x<-Health, y<-as.factor(Region),
color<-Country, fill<-as.factor(Country)))
ggplot(data <- happiness, mapping <-
aes(x<-Health, y<-as.factor(Region),
color<-Country, fill<-as.factor(Country)))
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-Country, fill<-as.factor(Country))) + geom_violin(trim=TRUE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
library(ggplot2)
library(dplyr)
#setwd("/Users/tobychappell/Documents/CS_Courses/CS_710/Workshop1Group3")
world_happiness <- read.csv(file = 'data/2019.csv')
# Score vs GDP
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score)) + geom_point()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.5))
ggplot(world_happiness,aes(x=gdp,y=Score,fill=gdp)) +
geom_boxplot() +
scale_fill_viridis_d()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.25))
gdp_group <- world_happiness %>% group_by(gdp) %>% summarise(score=mean(Score))
ggplot(gdp_group,aes(x=gdp,y=score,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/happinessdata.csv')
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#MAP
#Happiness by country map
map_plot<-ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon() +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c(option="magma")
#POINT
#Get average absolute value of latitude (distance from equator) for each country with the average happiness score
latitude<-happiness_map %>% group_by(region) %>% summarise(score=mean(Score),lat=mean(abs(lat))) %>% drop_na()
#Score versus distance from equator (not used)
ggplot(latitude,aes(x=lat,y=score,color=score)) +
geom_point() +
ggtitle("Happiness Score vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(color="Happiness Score") +
theme_bw() +
scale_color_viridis_c(option="cividis")
#BAR
#Factorize latitude into discrete categories
latitude$lat_cat<-factor(cut(latitude$lat,breaks=seq(0,70,5),labels=seq(0,65,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(score),count=n())
#Score versus distance from equator
bar_plot<-ggplot(lat_group,aes(x=lat_cat,y=score,fill=count)) +
geom_bar(stat="identity") +
ggtitle("Happiness vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(fill="Number of Countries") +
theme_classic() +
scale_fill_gradient(low = "grey25", high = " light blue")
#Count versus distance from equator colored by score (not used)
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar(stat="identity") +
ggtitle("Number of Countries vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Number of Countries") +
labs(fill="Happiness Score") +
theme_classic() +
scale_fill_viridis_c(option="cividis")
lay <- rbind(c(1,1,1,1,1,1),
c(NA,2,2,2,2,NA))
grid.arrange(map_plot, bar_plot, layout_matrix=lay)
latitude$lat_cat<-factor(cut(latitude$lat,breaks=seq(0,70,5),labels=seq(0,65,5)))
latitude<-latitude %>% group_by(lat_cat) %>% mutate(mean_score=mean(score))
box_plot <- ggplot(latitude,aes(x=lat_cat,y=score,fill=mean_score)) +
geom_boxplot() +
ggtitle("Happiness vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(fill="Average Happiness Score") +
theme_classic() +
scale_fill_viridis_c(option="magma")
grid.arrange(map_plot, box_plot, nrow=2)
library(ggplot2)
library(dplyr)
#setwd("/Users/tobychappell/Documents/CS_Courses/CS_710/Workshop1Group3")
world_happiness <- read.csv(file = 'data/2019.csv')
# Score vs GDP
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score)) + geom_point()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.5))
ggplot(world_happiness,aes(x=gdp,y=Score,fill=gdp)) +
geom_boxplot() +
scale_fill_viridis_d()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.25))
gdp_group <- world_happiness %>% group_by(gdp) %>% summarise(score=mean(Score))
ggplot(gdp_group,aes(x=gdp,y=score,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-Year, fill<-Year)) + geom_violin(trim=TRUE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-as.factor(Year), fill<-Year)) + geom_violin(trim=TRUE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), color<-as.factor(Year), fill<-as.factor(Year))) + geom_violin(trim=TRUE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
ggplot(data <- happiness, mapping <- aes(x<-Health, y<-as.factor(Region), fill<-as.factor(Year))) + geom_violin(trim=TRUE) + geom_boxplot(width=0.1) # geom_point() # geom_contour
library(readr)
PopulationMod <- read_csv("data/PopulationMod.csv")
View(PopulationMod)
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='data/PopulationMod.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#MAP
#Happiness by country map
map_plot<-ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon() +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c(option="magma")
#Population by country map
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=log10(Population))) +
coord_quickmap() +
geom_polygon() +
ggtitle("Population by Country (2015-2019)") +
labs(fill="Population") +
theme_void() +
scale_fill_viridis_c()
#Happiness by country map, brightness by population
happiness_map$Population[is.na(happiness_map$Population)] <- 100000
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large","","Medium"," ","Small"))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
#POINT
#Get average absolute value of latitude (distance from equator) for each country with the average happiness score
latitude<-happiness_map %>% group_by(region) %>% summarise(score=mean(Score),lat=mean(abs(lat)),pop=mean(Population)) %>% drop_na()
#Score versus distance from equator (not used)
ggplot(latitude,aes(x=lat,y=score,color=score)) +
geom_point() +
ggtitle("Happiness Score vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(color="Happiness Score") +
theme_bw() +
scale_color_viridis_c(option="cividis")
#BAR
#Factorize latitude into discrete categories
latitude$lat_cat<-factor(cut(latitude$lat,breaks=seq(0,70,5),labels=seq(0,65,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(score),pop=mean(pop),count=n())
#Score versus distance from equator
bar_plot<-ggplot(lat_group,aes(x=lat_cat,y=score,fill=count)) +
geom_bar(stat="identity") +
ggtitle("Happiness vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(fill="Number of Countries") +
theme_classic() +
scale_fill_gradient(low = "grey25", high = " light blue")
#Count versus distance from equator colored by score (not used)
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar(stat="identity") +
ggtitle("Number of Countries vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Number of Countries") +
labs(fill="Happiness Score") +
theme_classic() +
scale_fill_viridis_c(option="cividis")
lay <- rbind(c(1,1,1,1,1,1),
c(NA,2,2,2,2,NA))
grid.arrange(map_plot, bar_plot, layout_matrix=lay)
latitude$lat_cat<-factor(cut(latitude$lat,breaks=seq(0,70,5),labels=seq(0,65,5)))
latitude<-latitude %>% group_by(lat_cat) %>% mutate(mean_score=mean(score))
box_plot <- ggplot(latitude,aes(x=lat_cat,y=score,fill=mean_score)) +
geom_boxplot() +
ggtitle("Happiness vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(fill="Average Happiness Score") +
theme_classic() +
scale_fill_viridis_c(option="magma")
grid.arrange(map_plot, box_plot, nrow=2)
View(world_happiness)
library(ggplot2)
library(dplyr)
#setwd("/Users/tobychappell/Documents/CS_Courses/CS_710/Workshop1Group3")
world_happiness <- read.csv(file = 'data/2019.csv')
# Score vs GDP
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score)) + geom_point()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.5))
ggplot(world_happiness,aes(x=gdp,y=Score,fill=gdp)) +
geom_boxplot() +
scale_fill_viridis_d()
world_happiness$gdp <- cut(world_happiness$GDP.per.capita,breaks=seq(-.25,2,.25))
gdp_group <- world_happiness %>% group_by(gdp) %>% summarise(score=mean(Score))
ggplot(gdp_group,aes(x=gdp,y=score,fill=score)) +
geom_bar(stat="identity") +
scale_fill_viridis_c()
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='data/PopulationMod.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
#Read in population data
world_population <- read.csv(file='data/Population.csv') # PopulationMod.csv
#Read in population data
world_population <- read.csv(file='data/Population.csv') # PopulationMod.csv
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/happinessdata.csv')
View(world_population)
View(happiness)
View(world_population)
#Read in population data
world_population <- read.csv(file='data/PopulationMod.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='data/Population.csv') # PopulationMod.csv
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
View(world_population)
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
View(world_happiness)
View(latitude)
