d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
install.packages("patchwork")
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
stacked_plots
pchisq(97.5,80)
qchisq(97.5,80)
qchisq(.975,80)
pnorm(.5)
pnorm(-.5)
pnorm(-6.74671)
pnorm(.74963)-pnorm(-6.74671)
qnorm(.985,0,265/144)
qnorm(.985,0,sqrt(265/144))
pnorm()
pnorm((2.943876-0)/sqrt(265/144))
pnorm((2.943876-0)/sqrt(265/144))-pnorm((-2.943876-0)/sqrt(265/144))
pnorm(3/sqrt(62))-pnorm(-1/sqrt(62))
qnorm(.3,30,sqrt(201))
pnorm((22.565-30)/sqrt(201))
1-pnorm(44,23,sqrt(46))
1-pnorm((44-23)/sqrt(46))
1-pnorm(44,23,sqrt(46),TRUE)
1-pnorm(44,23,sqrt(46),FALSE)
pnorm(44,23,sqrt(46),FALSE)
4/3*qt(.975,8)
pt(3.074,8)-pt(-3.074,8)
pt(3.074*3/4,8)-pt(-3.074*3/4,8)
pt(3.074*3/4,9)-pt(-3.074*3/4,9)
pt(3.074,9)-pt(-3.074,9)
pt(3.074,7)-pt(-3.074,7)
pt(3.074,15)-pt(-3.074,15)
1-pchisq(26,24)
qchisq(.85,16)
pf(5/2,4,5)
1-pf(5/2,4,5)
12/5*qf(.96,9,15)
x<-c(5.3,4.3,7.7,14.7,11.3)
theta_hat <- mean(x)
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale=theta_hat),type="I")
plot(y,dgamma(y,shape=2,scale=theta_hat),type="1")
plot(y,dgamma(y,shape=2,scale= theta_hat),type=”l”)title("Toby Chappell")
plot(y,dgamma(y,shape=2,scale= theta_hat),type=”l”)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
x<-c(5.3,4.3,7.7,14.7,11.3)
theta_hat <- mean(x)
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
theta_hat <- mean(x)/2
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
theta_hat<-mean(x)/2
mean(method_1)
method_1<-c(79,66,57,91,42,59)
method_2<-c(71,43,58,78,20,56)
mean(method_1)
mean(method_2)
var(method_1)
var(method_2)
var(method_1,method_2)
mean(method_1,method_2)
var(method_2)
qnorm(.99,30)
qnorm(.99)
qnorm(.99,0,1.2)
qchisq(.99,29)
qchisq(.99,29,30)
pchisq(.99,29)
pchisq(.99,3-)
pchisq(.99,30)
setwd("~/Documents/CS_Courses/CS_710/VisualizationChallenge_1")
library(ggplot2)
world_happiness <- read.csv(file = '/archive/2019.csv')
world_happiness <- read.csv(file = 'archive/2019.csv')
View(world_happiness)
ggplot(world_happiness,aes(x=Generosity,y=Score,group=group)) +
geom_point()
ggplot(world_happiness,aes(x=Generosity,y=Score)) +
geom_point()
world_happiness.head
ggplot(world_happiness,aes(x=Country,y=Score)) +
geom_bar()
ggplot(world_happiness,aes(x=Country.or.region,y=Score)) +
geom_bar()
ggplot(world_happiness,aes(x=Score)) +
geom_bar()
ggplot(world_happiness,aes(x=Country.or.region,fill=Score)) +
geom_bar()
ggplot(world_happiness,aes(x=Country.or.region,fill=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Generosity,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Generosity,y=Score,fill=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Generosity,y=Score,color=Score)) +
geom_point()
ggplot(world_happiness,aes(x=GDP,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=GDP,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Gdp,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Social.support,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Healty.life.expectancy,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Healthy.life.expectancy,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Freedom.to.make.life.choices,y=Score)) +
geom_point()
ggplot(world_happiness,aes(x=Perceptions.of.corruption,y=Score)) +
geom_point()
#!!!
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score,color=Score)) +
geom_point()
#!!!
ggplot(world_happiness,aes(x=GDP.per.capita,y=Score,color=Generosity)) +
geom_point()
library(maps) # for the state map data
library(mapproj) ## THIS FIXES ERROR IN LECTURE
countries<-map_data("country") #extracts data from the states map
library(ggplot2)
library(reshape2)
library(dplyr)  # required for arrange()
library(colorspace)
library(viridis)
library(maps) # for the state map data
library(mapproj) ## THIS FIXES ERROR IN LECTURE
#### Contour maps ####
# Filled contour maps for ggplot2
boom<-melt(volcano)
range(boom$value) # Check out the range of values to pick scale breaks
boom$levels<-cut(boom$value,breaks=c(90,100,125,150,175,200)) # create breaks in values
boom$levels<-cut(boom$value,breaks=seq(90,200,by=10))
colors_surface<-terrain_hcl(nlevels(boom$levels), c = c(65, 0), l = c(45, 90), power = c(1/2, 1.5)) # Create color
#colors_surface<-sequential_hcl(nlevels(boom$levels), c = 0, l=c(30,90), power = 2.0)
colors_surface<-viridis(nlevels(boom$levels))
ggplot(boom,aes(Var1,Var2)) + xlab(" ") + ylab(" ") +
geom_tile(aes(fill=levels)) +
scale_fill_manual("surface",values=colors_surface)
# required packages
states_map<-map_data("state") #extracts
View(states_map)
countries<-map_data("world") #extracts data from the states map
View(countries)
happ<-data.frame(country=tolower(rownames(world_happiness)),world_happiness)
View(happ)
crime_map<-merge(countries,happ,by.x="region",by.y="Country.or.region")
crime_map<-arrange(crime_map,group,order)
head(crime_map)
View(crime_map)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=Score)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map("polyconic") +
geom_polygon()
coord_map( +
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map() +
geom_polygon()
r
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map() +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
geom_sf()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map("gilbert") +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map() +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map() +
geom_polygon()
View(happ)
countries<-map_data("world") #extracts data from the states map
View(countries)
happiness<-data.frame(country=tolower(rownames(world_happiness)),world_happiness)
View(happiness)
View(countries)
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region")
View(happiness_map)
happiness_map<-arrange(happiness_map,group,order)
happiness_map<-arrange(happiness_map,group,order)
View(happiness_map)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group)) +
coord_map() +
geom_polygon()
View(states_map)
library(ggplot2)
world_happiness <- read.csv(file = 'archive/2019.csv')
View(world_happiness)
library(maps) # for the state map data
library(mapproj) ## THIS FIXES ERROR IN LECTURE
countries<-map_data("world") #extracts data from the states map
View(countries)
world_happiness$Country.or.region[world_happiness$Country.or.region=="United States"] <- "USA"
library(maps) # for the state map data
library(mapproj) ## THIS FIXES ERROR IN LECTURE
countries<-map_data("world") #extracts data from the states map
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region")
happiness_map<-arrange(happiness_map,group,order)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group)) +
coord_map() +
geom_polygon()
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region",T=all)
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region",T=all)
happiness_map<-arrange(happiness_map,group,order)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group)) +
coord_map() +
geom_polygon()
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group)) +
coord_map() +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_map() +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
geom_polygon()
#Hue determined by Murder Arrest Rate and Saturation determined by Murder Rate
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap()+
geom_polygon()
world_happiness$Country.or.region[world_happiness$Country.or.region=="United Kingdom"] <- "UK"
countries<-map_data("world")
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon()
ggplot(happiness_map,aes(x=lat,group=group,fill=Score)) +
geom_bar()
ggplot(happiness_map,aes(x=region,group=group,fill=Score)) +
geom_bar()
min(happiness_map$lat)
max(happiness_map$lat)
happiness_map$lat_cat<-cut(happiness_map$lat,seq(-50,70,10))
ggplot(happiness_map,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
lat_group <- happiness_map %>% group_by(lat_cat)
library(dplyr)
lat_group <- happiness_map %>% group_by(lat_cat)
ggplot(lat_group,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
lat_group
happiness_map$lat_cat<-factor(cut(happiness_map$lat,seq(-50,70,10)))
lat_group <- happiness_map %>% group_by(lat_cat)
ggplot(lat_group,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
View(lat_group)
latitude<-DropNA(happiness_map)
latitude<-DropNA(happiness_map)
DropNA
library(tidyr)
latitude<-DropNA(happiness_map)
latitude<-happiness_map %>% drop_na()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,10)))
lat_group <- happiness_map %>% group_by(lat_cat)
ggplot(lat_group,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
latitude<-happiness_map %>% drop_na()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,10)))
lat_group <- latitude %>% group_by(lat_cat)
ggplot(lat_group,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-60,80,10)))
lat_group <- latitude %>% group_by(lat_cat)
ggplot(lat_group,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(count = n())
ggplot(lat_group,aes(x=lat_cat,group=group,fill=Score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,fill=Score)) +
geom_bar()
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(Score)
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score))
ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,y=score,color=score)) +
geom_point()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,2.5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score))
ggplot(lat_group,aes(x=lat_cat,y=score,color=score)) +
geom_point()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,1)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score))
ggplot(lat_group,aes(x=lat_cat,y=score,color=score)) +
geom_point()
ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score))
ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,fill=count_n) +
32
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score),count=n())
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score),count=n())
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score),count=n())
ggplot(lat_group,aes(x=lat_cat,fill=count) +
wqe
ger
ggplot(lat_group,aes(x=lat_cat,fill=count)) +
geom_bar()
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
library(viridis)
diamonds <- read.csv(file = 'diamonds.csv')
diamonds <- diamonds %>% rename(Cut=cut, Clarity=clarity)
diamonds$Cut <- factor(diamonds$Cut,levels=c("Fair","Good","Very Good","Premium","Ideal"))
diamonds$Clarity <- factor(diamonds$Clarity,levels=c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
cut_group <- diamonds %>% group_by(Cut) %>%
summarise(count = n()) %>%
mutate(per=count/sum(count)) %>%
ungroup()
clarity_group <- diamonds %>% group_by(Clarity,Cut) %>%
summarise(count = n()) %>%
group_by(Clarity) %>%
mutate(per=count/sum(count)) %>%
ungroup()
#Proportion of diamonds in the set of each cut
#Pie
ggplot(data=cut_group, aes(x= "", y = per, fill=Cut)) +
geom_col() +
coord_polar("y", start=0) +
ggtitle("Proportion of Diamonds by Cut") +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
#Side-by-Side Bars
ggplot(data=diamonds,aes(x=Cut,fill=Cut)) +
geom_bar() +
ggtitle("Frequency of Diamonds by Cut") +
ylab(label="Number of Diamonds") +
scale_fill_viridis_d()
#Stacked Bar
ggplot(data=cut_group,aes(x="",y=per,fill=Cut)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Percent") +
ggtitle("Proportion of Diamonds by Cut") +
scale_y_continuous(labels = scales::percent) +
scale_fill_viridis_d()
ggplot(lat_group,aes(x=lat_cat,fill=lat_cat)) +
geom_bar()
ggplot(latitude,aes(x=lat_cat,fill=lat_cat)) +
geom_bar()
ggplot(latitude,aes(x=lat_cat,fill=Score)) +
geom_bar()
ggplot(latitude,aes(x=lat_cat,fill=Score)) +
geom_bar()
View(latitude)
#Stacked Bars (Quantity)
ggplot(data=diamonds,aes(x=Clarity,y="",fill=Cut)) +
geom_bar(stat="identity") +
xlab("Clarity") +
ylab("Number of Diamonds") +
ggtitle("Frequency of Diamonds by Cut for each Clarity") +
scale_fill_viridis_d()
ggplot(latitude,aes(x=lat_cat,y="",fill=Score)) +
geom_bar()
ggplot(latitude,aes(x=lat_cat,y="",fill=Score)) +
geom_bar("identity")
ggplot(latitude,aes(x=lat_cat,y="",fill=Score)) +
geom_bar(stat="identity")
ggplot(latitude,aes(x=lat_cat,y="",fill=mean(Score))) +
geom_bar(stat="identity")
ggplot(lat_group,aes(x=lat_cat,y=count,fill=mean(Score))) +
geom_bar()
latitude$lat_cat<-factor(cut(latitude$lat,seq(-50,70,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(Score),count=n())
ggplot(lat_group,aes(x=lat_cat,y=count,fill=Score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar()
ggplot(lat_group,aes(x=lat_cat,y=count,fill=score)) +
geom_bar(stat="identity")
ggplot(lat_group,aes(x=lat_cat,fill=score)) +
geom_bar()
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
world_happiness <- read.csv(file = 'data/2019.csv')
setwd("~/Documents/CS_Courses/CS_710/VisualizationChallenge_1")
setwd("~/Documents/CS_Courses/CS_710/Workshop1Group3")
world_happiness <- read.csv(file = 'data/2019.csv')
world_happiness$Country.or.region[world_happiness$Country.or.region=="United States"] <- "USA"
world_happiness$Country.or.region[world_happiness$Country.or.region=="United Kingdom"] <- "UK"
countries<-map_data("world")
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country.or.region",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#MAP
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon()
