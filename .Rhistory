scale_fill_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_color_gradient(low=min(c),high=max(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),.75)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),.95)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_color_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c)) +
scale_fill_gradientn(colours=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=1-c)
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=#FFFFFF-c)
coord_map("polyconic") +
we
wer
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=FFFFFF-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=FFFFFF-c)
c
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=max(c_-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=max(c)-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
#scale_fill_gradient(low=max(c),high=min(c))
scale_fill_gradientn(colours=max(c)-c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
library(ggplot2)
library(reshape2)
library(dplyr)  # required for arrange()
library(colorspace)
library(viridis)
library(maps) # for the state map data
library(mapproj)
murder_rates <- read.csv(file = 'MurderRate.csv')
murder_rates$state <- tolower(murder_rates$state)
states_map<-map_data("state") #extracts data from the states map
crimes<-data.frame(state=tolower(rownames(USArrests)),USArrests)
crimes<-merge(crimes,murder_rates,by="state")
crime_map<-merge(states_map,crimes,by.x="region",by.y="state")
crime_map<-arrange(crime_map,group,order)
c = hsv((max(crime_map$Murder)-crime_map$Murder)/(max(crime_map$Murder)-min(crime_map$Murder))/7,(crime_map$Murder-min(crime_map$Murder))/(max(crime_map$Murder)-min(crime_map$Murder)),.95)
# ggplot(crime_map,aes(x=long,y=lat,group=group)) +
#   coord_map("polyconic") +
#   geom_polygon(aes(fill=Murder)) +
#   scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,aes(show.legend = TRUE))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradient(low=max(c),high=min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min)c)
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min(c))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),(max(c)+min(c))/2,min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c,show.legend = TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Murder)) +
coord_map("polyconic") +
geom_polygon(fill=c) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Murder)) +
coord_map("polyconic") +
geom_polygon(fill=c,aes(fill=Murder)) +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
ggplot(crime_map,aes(x=long,y=lat,group=group,fill=Murder)) +
coord_map("polyconic") +
geom_polygon() +
scale_fill_gradientn(colors = c(max(c),hsv(1/14,.5,.95),min(c)))
source('~/Documents/CS_Courses/CS_710/Color/USArrests.R', echo=TRUE)
ggplot(crime_map,aes(x=long,y=lat,group=group)) +
coord_map("polyconic") +
geom_polygon(fill=c)
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
install.packages("patchwork")
library(ggplot2)
library(patchwork)
d1=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d2=expand.grid(h=seq(0,1,1/12), s=seq(0,1,1/7), v=seq(0,1,1/7))
d=expand.grid(h=seq(0,0.95,0.05), s=seq(0,0.95,0.05), v=seq(0,1,0.2))
p1=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v)))
p2=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))
p3=ggplot() +
coord_polar(theta="x") +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
scale_fill_identity() +
geom_rect(data=d1, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=s, ymax=s+resolution(s), fill=hsv(h,s,v))) +
geom_rect(data=d2, mapping=aes(xmin=h, xmax=h+resolution(h), ymin=v, ymax=v+resolution(v), fill=hsv(h,s,v)))+
geom_smooth()
stacked_plots <- p1 + p2+p3 + plot_layout(ncol = 1)
stacked_plots
stacked_plots
pchisq(97.5,80)
qchisq(97.5,80)
qchisq(.975,80)
pnorm(.5)
pnorm(-.5)
pnorm(-6.74671)
pnorm(.74963)-pnorm(-6.74671)
qnorm(.985,0,265/144)
qnorm(.985,0,sqrt(265/144))
pnorm()
pnorm((2.943876-0)/sqrt(265/144))
pnorm((2.943876-0)/sqrt(265/144))-pnorm((-2.943876-0)/sqrt(265/144))
pnorm(3/sqrt(62))-pnorm(-1/sqrt(62))
qnorm(.3,30,sqrt(201))
pnorm((22.565-30)/sqrt(201))
1-pnorm(44,23,sqrt(46))
1-pnorm((44-23)/sqrt(46))
1-pnorm(44,23,sqrt(46),TRUE)
1-pnorm(44,23,sqrt(46),FALSE)
pnorm(44,23,sqrt(46),FALSE)
4/3*qt(.975,8)
pt(3.074,8)-pt(-3.074,8)
pt(3.074*3/4,8)-pt(-3.074*3/4,8)
pt(3.074*3/4,9)-pt(-3.074*3/4,9)
pt(3.074,9)-pt(-3.074,9)
pt(3.074,7)-pt(-3.074,7)
pt(3.074,15)-pt(-3.074,15)
1-pchisq(26,24)
qchisq(.85,16)
pf(5/2,4,5)
1-pf(5/2,4,5)
12/5*qf(.96,9,15)
x<-c(5.3,4.3,7.7,14.7,11.3)
theta_hat <- mean(x)
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale=theta_hat),type="I")
plot(y,dgamma(y,shape=2,scale=theta_hat),type="1")
plot(y,dgamma(y,shape=2,scale= theta_hat),type=”l”)title("Toby Chappell")
plot(y,dgamma(y,shape=2,scale= theta_hat),type=”l”)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
x<-c(5.3,4.3,7.7,14.7,11.3)
theta_hat <- mean(x)
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
theta_hat <- mean(x)/2
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
theta_hat<-mean(x)/2
mean(method_1)
method_1<-c(79,66,57,91,42,59)
method_2<-c(71,43,58,78,20,56)
mean(method_1)
mean(method_2)
var(method_1)
var(method_2)
var(method_1,method_2)
mean(method_1,method_2)
var(method_2)
qnorm(.99,30)
qnorm(.99)
qnorm(.99,0,1.2)
qchisq(.99,29)
qchisq(.99,29,30)
pchisq(.99,29)
pchisq(.99,3-)
pchisq(.99,30)
pnorm(22,20,1025/144)-pnorm(2,20,1025/144)
pnorm(22,20,sqrt(1025/144))-pnorm(2,20,sqrt(1025/144))
qnorm(.985,0,sqrt(265/144))
1-pchisq(44,23)
pchisq(44,23,lower.tail=TRUE)
pchisq(44,23,lower.tail=FALSE)
4/3*qt(.975,8)
1-pchisq(26,24)
1-pf(5/2,4,5)
1-pf(2,4,4)
1-pf(2.5,4,4)
1-pf(2.5,4,4)
x<-c(5.3,4.3,7.7,14.7,11.3)
theta_hat<-mean(x)/2
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
plot(y,dgamma(y,shape=2,scale= theta_hat))
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
alpha<-1-.95
#Population mean estimation
m<-mean(data)
data<-c(79,66,57,91,42,59)
#Population mean estimation
m<-mean(data)
s<-var(data)
n<-length(data)
lb<-m-(qt(1-alpha/2,n-1)*s)/sqrt(n)
ub<-m+(qt(1-alpha/2,n-1)*s)/sqrt(n)
c(lb,ub)
#Population variance estimation
s<-var(data)
n<-length(data)
lb<-((n-1)*s)/qchisq(0.975,n-1)
ub<-((n-1)*s)/qchisq(0.025,n-1)
c(lb,ub)
lb<-((n-1)*s)/qchisq(1-alpha/2,n-1)
ub<-((n-1)*s)/qchisq(alpha,n-1)
c(lb,ub)
ub<-((n-1)*s)/qchisq(alpha/2,n-1)
c(lb,ub)
m
s
lb<-m-(qnorm(1-alpha/2)*p_s)/sqrt(n)
p_s <- 300
#Population mean estimation (sigma^2 known)
m<-mean(data)
n<-length(data)
lb<-m-(qnorm(1-alpha/2)*p_s)/sqrt(n)
ub<-m+(qnorm(1-alpha/2)*p_s)/sqrt(n)
c(lb,ub)
#Ratio of population variance estimation
data1<-c(79,66,57,91,42,59)
data2<-c(80,55,70,91,92,87)
s1<-var(data1)
n1<-length(data1)
s2<-var(data2)
n2<-length(data2)
lb<-s1/(s2*qf(1-alpha/2,n1-1,n2-1))
ub<-s1/(s2*qf(alpha/2,n1-1,n2-1))
c(lb,ub)
method1 <- c(79,66,57,91,42,59)
alpha = 1-.99
m1<-mean(method1)
s1<-var(method1)
n1<-length(method1)
lb1<-m1-(qt(1-alpha/2,n-1)*s1)/sqrt(n1)
ub1<-m1+(qt(1-alpha/2,n-1)*s1)/sqrt(n1)
c(lb1,ub1)
method1 <- c(79,66,57,91,42,59)
alpha = 1-.99
m1<-mean(method1)
s1<-var(method1)
n1<-length(method1)
lb1<-m1-(qt(1-alpha/2,n1-1)*s1)/sqrt(n1)
ub1<-m1+(qt(1-alpha/2,n1-1)*s1)/sqrt(n1)
c(lb1,ub1)
theta_hat<-mean(x)/22
# Question 2
x<-c(13.6,18.3,35.7,11.7,32.3,45.9)
theta_hat<-mean(x)/22
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
# b
method2<-c(71,43,58,78,20,56)
s2<-var(method2)
n2<-length(method2)
lb2<-((n2-1)*s2)/qchisq(1-alpha/2,n2-1)
ub2<-((n2-1)*s2)/qchisq(alpha/2,n2-1)
c(lb2,ub2)
# b
method2<-c(71,43,58,78,20,56)
alpha2 = 1-.98
s2<-var(method2)
n2<-length(method2)
lb2<-((n2-1)*s2)/qchisq(1-alpha2/2,n2-1)
ub2<-((n2-1)*s2)/qchisq(alpha2/2,n2-1)
c(lb2,ub2)
# Question 3
# a
method1<-c(79,66,57,91,42,59)
alpha1 = 1-.99 # 99% confidence
m1<-mean(method1) # sample mean
s1<-var(method1) # sample variance
n1<-6
lb1<-m1-(qt(1-alpha1/2,n1-1)*s1)/sqrt(n1) # lower bound of CI
ub1<-m1+(qt(1-alpha1/2,n1-1)*s1)/sqrt(n1) # upper bound of CI
c(lb1,ub1)
n1<-length(method1)
lb1<-m1-(qt(1-alpha1/2,n1-1)*s1)/sqrt(n1) # lower bound of CI
ub1<-m1+(qt(1-alpha1/2,n1-1)*s1)/sqrt(n1) # upper bound of CI
c(lb1,ub1)
c(lb2,ub2)
# b
method2<-c(71,43,58,78,20,56)
alpha2 = 1-.98 # 98% confidence
s2<-var(method2) # sample variance
n2<-length(method2)
lb2<-((n2-1)*s2)/qchisq(1-alpha2/2,n2-1) # lower bound of CI
ub2<-((n2-1)*s2)/qchisq(alpha2/2,n2-1) # upper bound of CI
c(lb2,ub2)
method1<-c(79,66,57,91,42,59)
alpha1 = 1-.99 # 99% confidence
m1<-mean(method1) # sample mean
s1<-var(method1) # sample variance
n1<-length(method1)
lb1<-m1-(qt(1-alpha1/2,n1-1)*sqrt(s1))/sqrt(n1) # lower bound of CI
ub1<-m1+(qt(1-alpha1/2,n1-1)*sqrt(s1))/sqrt(n1) # upper bound of CI
c(lb1,ub1)
x<-c(13.6,18.3,35.7,11.7,32.3,45.9)
theta_hat<-mean(x)/22
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
# Question 1
# a
pnorm(-4,-6,1)-pnorm(-8,-6,1)
# b
qnorm(.995)
# c
pnorm(-8,-12,sqrt(40))-pnorm(-10,-12,sqrt(40))
# d
qnorm(.3,-12,sqrt(40))
# e
1-pt(24,15)
# f
1/8*qt(.975,15)
# g
1-pchisq(1,6)
# h
4*qchisq(.6,6)
# i
1-pf(7/3,6,7)
# j
6/7*qf(.975,6,7)
c(lb1,ub1)
c(lb2,ub2)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/pop-happiness.csv')
setwd("~/Documents/CS_Courses/CS_710/Workshop1Group3")
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/pop-happiness.csv')
View(world_happiness)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = 'data/pop-happiness.csv')
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
View(world_happiness)
#POINT
#Get average absolute value of latitude (distance from equator) for each country with the average happiness score
latitude<-happiness_map %>% group_by(region) %>% summarise(score=mean(Score),lat=mean(abs(lat)),pop=mean(Population))
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country,Region) %>% summarise(Score=mean(HappinessScore),Population=mean(Population))
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
View(happiness_map)
#Read in combined happiness data (2015-2019)
data <- read.csv(file = 'data/pop-happiness.csv')
#Edit specific labels to merge with countries data set
data$Country[data$Country=="United States"] <- "USA"
data$Country[data$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-data %>% group_by(Country,Region) %>% summarise(Score=mean(HappinessScore),Population=mean(Population))
View(world_happiness)
